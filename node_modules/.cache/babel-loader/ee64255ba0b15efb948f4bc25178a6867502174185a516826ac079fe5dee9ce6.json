{"ast":null,"code":"import _regeneratorRuntime from \"C:/YARELI/New/VUE/DogToralia/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/YARELI/New/VUE/DogToralia/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.date.to-json.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport { useToast } from 'vue-toastification';\nexport default {\n  data: function data() {\n    return {\n      busiId: this.$route.params.id,\n      // Iniciar con los 7 días de la semana\n      schedule: [{\n        day_of_week: 'Monday',\n        time_slots: [{\n          start_time: '',\n          end_time: ''\n        }]\n      }, {\n        day_of_week: 'Tuesday',\n        time_slots: [{\n          start_time: '',\n          end_time: ''\n        }]\n      }, {\n        day_of_week: 'Wednesday',\n        time_slots: [{\n          start_time: '',\n          end_time: ''\n        }]\n      }, {\n        day_of_week: 'Thursday',\n        time_slots: [{\n          start_time: '',\n          end_time: ''\n        }]\n      }, {\n        day_of_week: 'Friday',\n        time_slots: [{\n          start_time: '',\n          end_time: ''\n        }]\n      }, {\n        day_of_week: 'Saturday',\n        time_slots: [{\n          start_time: '',\n          end_time: ''\n        }]\n      }, {\n        day_of_week: 'Sunday',\n        time_slots: [{\n          start_time: '',\n          end_time: ''\n        }]\n      }]\n    };\n  },\n  setup: function setup() {\n    var toast = useToast();\n    return {\n      toast: toast\n    };\n  },\n  methods: {\n    // Método para añadir una nueva franja horaria a un día específico\n    addSlot: function addSlot(index) {\n      this.schedule[index].time_slots.push({\n        start_time: '',\n        end_time: ''\n      });\n    },\n    // Método para eliminar una franja horaria de un día específico\n    removeSlot: function removeSlot(dayIndex, slotIndex) {\n      this.schedule[dayIndex].time_slots.splice(slotIndex, 1);\n    },\n    // Método para registrar todas las franjas horarias de un día específico\n    fixSlots: function fixSlots(dayIndex) {\n      var _this = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var token, selectedDay, incompleteSlots, response;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              token = localStorage.getItem('token');\n              if (token) {\n                _context.next = 5;\n                break;\n              }\n              _this.toast.error('No se encontró ningún token, redireccionando para iniciar sesión');\n              _this.$router.push('/auth/login');\n              return _context.abrupt(\"return\");\n            case 5:\n              selectedDay = _this.schedule[dayIndex]; // Verificar que todas las franjas horarias estén completas\n              incompleteSlots = selectedDay.time_slots.some(function (slot) {\n                return !slot.start_time || !slot.end_time;\n              });\n              if (!incompleteSlots) {\n                _context.next = 10;\n                break;\n              }\n              _this.toast.error('Por favor complete todas las franjas horarias antes de fijarlas.');\n              return _context.abrupt(\"return\");\n            case 10:\n              _context.prev = 10;\n              _context.next = 13;\n              return fetch(\"http://127.0.0.1:8000/api/business/schedule/\".concat(_this.busiId), {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json',\n                  'Authorization': \"Bearer \".concat(token)\n                },\n                body: JSON.stringify({\n                  schedule: [{\n                    day_of_week: selectedDay.day_of_week,\n                    time_slots: selectedDay.time_slots // Enviar todas las franjas horarias del día\n                  }]\n                })\n              });\n            case 13:\n              response = _context.sent;\n              if (response.ok) {\n                _context.next = 16;\n                break;\n              }\n              throw new Error('Error al registrar las franjas horarias');\n            case 16:\n              _this.toast.success('Franjas horarias registradas correctamente.');\n              _context.next = 22;\n              break;\n            case 19:\n              _context.prev = 19;\n              _context.t0 = _context[\"catch\"](10);\n              _this.toast.error('Hubo un error en el registro.');\n            case 22:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[10, 19]]);\n      }))();\n    }\n  }\n};","map":{"version":3,"names":["useToast","data","busiId","$route","params","id","schedule","day_of_week","time_slots","start_time","end_time","setup","toast","methods","addSlot","index","push","removeSlot","dayIndex","slotIndex","splice","fixSlots","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","token","selectedDay","incompleteSlots","response","wrap","_callee$","_context","prev","next","localStorage","getItem","error","$router","abrupt","some","slot","fetch","concat","method","headers","body","JSON","stringify","sent","ok","Error","success","t0","stop"],"sources":["C:\\YARELI\\New\\VUE\\DogToralia\\src\\pages\\admin\\horarios\\regisHorario.vue"],"sourcesContent":["<template>\r\n  <div class=\"card\">\r\n    <div class=\"container mt-5\">\r\n      <h1 class=\"text-center\">Registrar Horario para Negocio {{ busiId }}</h1>\r\n\r\n      <form>\r\n        <div v-for=\"(day, index) in schedule\" :key=\"index\" class=\"mb-4\">\r\n          <h4>{{ day.day_of_week }}</h4>\r\n\r\n          <div class=\"d-flex justify-content-end\">\r\n            <button class=\"btn btn-info mt-2\" @click.prevent=\"addSlot(index)\">Añadir Franja Horaria</button>\r\n          </div>\r\n\r\n          <div v-for=\"(slot, idx) in day.time_slots\" :key=\"idx\" class=\"row mb-2\">\r\n            <div class=\"col-sm-6 col-md-3\">\r\n              <label>Apertura</label>\r\n              <input type=\"time\" v-model=\"slot.start_time\" class=\"form-control\" required />\r\n            </div>\r\n            <div class=\"col-sm-6 col-md-3\">\r\n              <label>Cierre</label>\r\n              <input type=\"time\" v-model=\"slot.end_time\" class=\"form-control\" required />\r\n            </div>\r\n            <div class=\"col-2 d-flex align-items-end\">\r\n              <span @click=\"removeSlot(index, idx)\">\r\n                <i class=\"icofont icofont-close-circled font-danger fs-4\"></i>\r\n              </span>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Botón para fijar todas las franjas horarias del día -->\r\n          <div class=\"d-flex justify-content-end mt-2\">\r\n            <button @click.prevent=\"fixSlots(index)\" class=\"btn btn-primary\">Fijar Horarios</button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nimport { useToast } from 'vue-toastification';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      busiId: this.$route.params.id,\r\n      // Iniciar con los 7 días de la semana\r\n      schedule: [\r\n        { day_of_week: 'Monday', time_slots: [{ start_time: '', end_time: '' }] },\r\n        { day_of_week: 'Tuesday', time_slots: [{ start_time: '', end_time: '' }] },\r\n        { day_of_week: 'Wednesday', time_slots: [{ start_time: '', end_time: '' }] },\r\n        { day_of_week: 'Thursday', time_slots: [{ start_time: '', end_time: '' }] },\r\n        { day_of_week: 'Friday', time_slots: [{ start_time: '', end_time: '' }] },\r\n        { day_of_week: 'Saturday', time_slots: [{ start_time: '', end_time: '' }] },\r\n        { day_of_week: 'Sunday', time_slots: [{ start_time: '', end_time: '' }] }\r\n      ]\r\n    };\r\n  },\r\n  setup() {\r\n    const toast = useToast();\r\n    return { toast };\r\n  },\r\n  methods: {\r\n    // Método para añadir una nueva franja horaria a un día específico\r\n    addSlot(index) {\r\n      this.schedule[index].time_slots.push({ start_time: '', end_time: '' });\r\n    },\r\n\r\n    // Método para eliminar una franja horaria de un día específico\r\n    removeSlot(dayIndex, slotIndex) {\r\n      this.schedule[dayIndex].time_slots.splice(slotIndex, 1);\r\n    },\r\n\r\n    // Método para registrar todas las franjas horarias de un día específico\r\n    async fixSlots(dayIndex) {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        this.toast.error('No se encontró ningún token, redireccionando para iniciar sesión');\r\n        this.$router.push('/auth/login');\r\n        return;\r\n      }\r\n\r\n      const selectedDay = this.schedule[dayIndex];\r\n      \r\n      // Verificar que todas las franjas horarias estén completas\r\n      const incompleteSlots = selectedDay.time_slots.some(slot => !slot.start_time || !slot.end_time);\r\n      if (incompleteSlots) {\r\n        this.toast.error('Por favor complete todas las franjas horarias antes de fijarlas.');\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const response = await fetch(`http://127.0.0.1:8000/api/business/schedule/${this.busiId}`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${token}`\r\n          },\r\n          body: JSON.stringify({\r\n            schedule: [\r\n              {\r\n                day_of_week: selectedDay.day_of_week,\r\n                time_slots: selectedDay.time_slots  // Enviar todas las franjas horarias del día\r\n              }\r\n            ]\r\n          })\r\n        });\r\n\r\n        if (!response.ok) throw new Error('Error al registrar las franjas horarias');\r\n\r\n        this.toast.success('Franjas horarias registradas correctamente.');\r\n      } catch (error) {\r\n        this.toast.error('Hubo un error en el registro.');\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}